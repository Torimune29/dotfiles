# !!! added
# functions

##############################################################################
# for interactive, or non-interactive use
##############################################################################

#######################################
# decompress any file
# Arguments:
#   file
# Returns:
#   0 is ok, non-zero on error.
# Details:
#   see: https://github.com/paulirish/dotfiles/blob/4708afc97acd00554aa69093ee591cfcc501d73f/.functions#L97
#######################################
decompress () {
  if [ -f "$1" ] ; then
    local filename=$(basename "$1")
    local foldername="${filename%%.*}"
    local fullpath="$(cd $(dirname $1) && pwd)/$(basename $1)"
    local didfolderexist=false
    if [ -d "$foldername" ]; then
      didfolderexist=true
      read -p "$foldername already exists, do you want to overwrite it? (y/n) " -n 1
      echo
      if [[ $REPLY =~ ^[Nn]$ ]]; then
        return
      fi
    fi
    mkdir -p "$foldername" && cd "$foldername"
    case $1 in
      *.tar.bz2) tar xjf "$fullpath" ;;
      *.tar.gz) tar xzf "$fullpath" ;;
      *.tar.xz) tar Jxvf "$fullpath" ;;
      *.tar.Z) tar xzf "$fullpath" ;;
      *.tar) tar xf "$fullpath" ;;
      *.taz) tar xzf "$fullpath" ;;
      *.tb2) tar xjf "$fullpath" ;;
      *.tbz) tar xjf "$fullpath" ;;
      *.tbz2) tar xjf "$fullpath" ;;
      *.tgz) tar xzf "$fullpath" ;;
      *.txz) tar Jxvf "$fullpath" ;;
      *.zip) unzip "$fullpath" ;;
      *) echo "'$1' cannot be extracted via extract()" >2 && cd .. && ! $didfolderexist && rm -r "$foldername" ;;
    esac
  else
    echo "'$1' is not a valid file" >2
  fi
}

#######################################
# compress any file/directory to tar.gz
# Arguments:
#   file or directory
# Returns:
#   0 is ok, non-zero on error.
#######################################
compress () {
  if [ ! -e "$1" ] ; then
    echo "'$1' is not a valid file" >2
  fi
  local path
  if [ -d "$1" ]; then
    path="$(basename $(realpath -s $1))"
  else
    path=$1
  fi
  tar -cvzf "$path".tar.gz "$path"
}

#######################################
# mkdir and cd
# Arguments:
#   path
# Returns:
#   0 is ok, non-zero on error.
#######################################
mkcd () {
  \mkdir -p $1 && cd "$_" || exit
}

#######################################
# cd and ls
# Arguments:
#   path
# Returns:
#   0 is ok, non-zero on error.
#######################################
cdls () {
  \cd $1 && ls
}

#######################################
# chaet
# Arguments:
#   command you want to cheat
# Returns:
#   0 is ok, non-zero on error.
#######################################
cheat () {
  curl "cheat.sh/$1" | less
}

#######################################
# wttr.in
# Arguments:
#   location you want to know weather
# Returns:
#   0 is ok, non-zero on error.
#######################################
wttr () {
  curl -s -H "Accept-Language: ${LANG%_*}" v2d.wttr.in/${1:Tokyo} | less
}

#######################################
# switch file to back/front
# Arguments:
#   $1: bak or fr
#   $2: file path
# Returns:
#   0 is ok, non-zero on error.
#######################################
sw () {
  if [ $# != 2 ]; then echo "sw: argument error." >&2; return 1; fi
  if [ $1 = "bak" ]; then mv -i $2{,.bak};
  elif [ $1 = "fr" ]; then mv -i $2{.bak,};
  else echo "sw: argument parse error $1." >&2 ; fi
}
#######################################
# open record script session
# Arguments:
#   $1: base directory path.
# Returns:
#   0 is ok, non-zero on error.
# Outputs:
#   Write $1/$(date '+%Y%m%d%H%M%S'){,.timing} for scriptreplay
# Details:
#   https://orebibou.com/ja/home/201705/20170523_002/
#######################################
record_script () {
  [ ! -d "$1" ] && return 1
  TIMESTAMP=$(date '+%Y%m%d%H%M%S')
  script -tfq --timing="$1/$TIMESTAMP.timing" >(awk '{print strftime("%F %T ") $0}{fflush() }'>> "$1/$TIMESTAMP")
}


##############################################################################
# for interactive shell only
##############################################################################

#######################################
# replay script session
# Arguments:
#   divisor
# Returns:
#   0 is ok, non-zero on error.
# Outputs:
#   Input $1/$(date '+%Y%m%d%H%M%S'){,.timing} to scriptreplay
# Details:
#   search $1{,.timing}
#   https://orebibou.com/ja/home/201705/20170523_002/
#######################################
replay_user_script() {
  local path=""
  [ -z "$1" ] && return 1
  if [ "$(command -v fzf)" ] && fzf --version > /dev/null 2>&1; then
    path=$(find $MY_OWN_LOG_PATH/terminal | fzf)
  fi
  [ ! -e "$path" ] && return 1
  # https://nobwak.github.io/posts/2008-02-19-%E3%82%B7%E3%82%A7%E3%83%AB%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%81%A7%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E5%90%8D%E3%81%8B%E3%82%89%E6%8B%A1%E5%BC%B5%E5%AD%90%E3%82%92%E5%88%A4%E5%AE%9A%E3%81%99%E3%82%8B/
  scriptreplay --divisor ${1:-1} -t <(awk 'BEGIN{i=0}{cmd="cat '$path' | cut -c 21- | tail -c +"i" | head -c "$2" | wc -l"; cmd | getline c ; i+=$2 ; print $1,$2+c*20 }' "${path}".timing) "${path}"
}


#######################################
# fuzzy files selector
# Arguments:
#   query and/or directory path.
# Returns:
#   0 is ok, non-zero on error.
# Details:
#######################################
fselectfiles () {
  local dir query
  for arg; do
    if [ -d "$arg" ]; then dir=$arg ; else query="$query $arg" ; fi
  done
  echo $(fd -HI --type file --exclude '.git/' --exclude 'node_modules' --max-depth 5 . ${dir:-.} | fzf --query="${query}" --preview 'bat --color=always -p {}')
}

#######################################
# fuzzy directories selector
# Arguments:
#   query and/or directory path.
# Returns:
#   0 is ok, non-zero on error.
# Details:
#######################################
fselectdirectories () {
  local dir query
  for arg; do
    if [ -d "$arg" ]; then dir=$arg ; else query="$query $arg" ; fi
  done
  echo $(fd --type directory --max-depth 5 . ${dir:-.} | fzf --query="${query}" --preview 'exa --tree --level 3 {}')
}

#######################################
# fuzzy git commit sha selector
# Arguments:
#   file or directory
# Returns:
#   0 is ok, non-zero on error.
# Details:
#######################################
fselectgitcommit () {
  local commits commit
  commits=$(git log --oneline --date-order --pretty="%C(yellow)%h%Creset %C(cyan)%ad%Creset %Cgreen%d%Creset%s" --reverse $1) &&
  commit=$(echo "$commits" | fzf --tac +s -m -e --preview 'f() {
      set -- $(echo "$@" | grep -o "[a-f0-9]\{7\}" | head -1);
      if [ $1 ]; then
        git show --oneline --color $1
      else
        echo "blank"
      fi
    }; f {}' | sed "s/ .*//")
  echo "$commit"
}

#######################################
# fuzzy ssh host selector
# Arguments:
#   query and/or directory path.
# Returns:
#   0 is ok, non-zero on error.
# Details:
#  search $HOME/.ssh/config and $HOME/.ssh/*/config*
#######################################
fselectsshhost () {
  echo -e "$(grep -E "^Host " $HOME/.ssh/config)\n$(grep -E "^Host " $HOME/.ssh/*/config*)" | sed -e 's/Host[ ]*//g' -e '/^\*$/d' | fzf +m --query=$*
}