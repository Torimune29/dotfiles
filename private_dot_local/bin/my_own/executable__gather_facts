#!/usr/bin/env sh

#######################################
# get_system
# Arguments:
#   None
# Returns:
#   0 is ok, non-zero on error.
# Outputs:
#   Write system name("Linux", "Mac", "Windows", "Other") to stdout
# Details:
#   see: https://stackoverflow.com/a/27776822/9982477
#   see: https://github.com/ouch-org/ouch/blob/main/install.sh
#######################################
get_system () {
  case "$(uname -s)" in
    Linux) echo "Linux" ;;
    Darwin) echo "Mac" ;;
    CYGWIN*|MINGW32*|MSYS*|MINGW*) echo "Windows" ;;
    *) echo "Other" ;;
  esac
}

#######################################
# get escalation method(sudo, or su) if needed
# Arguments:
#   None
# Returns:
#   0
# Outputs:
#   Write method("sudo~", "su~", or "") to stdout
# Details:
#   If root, write empty("").
#   If non root, delegate environments (sudo -E).
#######################################
get_escalation_method() {
  if [ "$(whoami)" != "root" ]; then
    if [ -x "$(command -v sudo)" ]; then echo "sudo -S -E"
    elif [ -x "$(command -v su)" ]; then echo "su - -c"; fi
  fi
}

#######################################
# get fetch method(curl, wget) if needed
# Arguments:
#   None
# Returns:
#   0 is ok
#   1 is error, fetch method not found.
# Outputs:
#   Write method("curl~", "wget~") to stdout
#   Write error message to stderr if fetch method not found
# Details:
#   Priority: 1st curl, 2nd wget.
#   Each method will do output result to stdout.
#   Each method will try to retry if needed.
#######################################
get_fetch_method () {
  if [ -x "$(command -v curl)" ];  then echo "curl --silent --retry 3";
  elif [ -x "$(command -v wget)" ];    then echo "wget --quiet --tries=3 -O -";
  else echo "Error: fetch method not found." >&2; return 1;
  fi
}

#######################################
# get package management method information
# Arguments:
#   None
# Returns:
#   0 is ok
#   1 is error. can't parse package manager.
# Outputs:
#   Write space-separated variable-like string("A=a; B=b;") to stdout
#     _facts_manager=(apt|yum|dnf|zypper|apk)
#     _facts_install=(apt-get install|yum install|dnf~|zypper~|apk~)
#     _facts_update=(apt-get update|yum check-update|dnf~|zypper~|apk~)
# Details:
#   use stdout with eval.
#   e.g. eval $(get_package_manager); eval $_facts_install git
#   see: https://stackoverflow.com/questions/2488715/idioms-for-returning-multiple-values-in-shell-scripting
#######################################
get_package_management_method () {
  if [ -x "$(command -v apt-get)" ];    then  echo "_facts_manager=\"apt\";       _facts_install=\"DEBIAN_FRONTEND=noninteractive apt-get install -y\";     _facts_update=\"apt-get update\";  _facts_install_file=\"DEBIAN_FRONTEND=noninteractive apt install -y\"; "
  elif [ -x "$(command -v yum)" ];      then  echo "_facts_manager=\"yum\";       _facts_install=\"yum install -y\";         _facts_update=\"yum check-update\" "
  elif [ -x "$(command -v dnf)" ];      then  echo "_facts_manager=\"dnf\";       _facts_install=\"dnf install -y\";         _facts_update=\"dnf check-update\" "
  elif [ -x "$(command -v microdnf)" ]; then  echo "_facts_manager=\"microdnf\";  _facts_install=\"microdnf install -y\";    _facts_update=\"microdnf update\" "
  elif [ -x "$(command -v zypper)" ];   then  echo "_facts_manager=\"zypper\"     _facts_install=\"zypper install -y\";      _facts_update=\"zypper refresh\" "
  elif [ -x "$(command -v apk)" ];      then  echo "_facts_manager=\"apk\";       _facts_install=\"apk add --no-cache\";     _facts_update=\"apk update\" "
  else return 1
  fi
}