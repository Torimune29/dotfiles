#!/usr/bin/env bash

# system:
#   /etc/environment : all users/system (reboot required)
#   $SHELLRC($HOME/.bashrc) : now user (source required)
# tool specific:
#   npm : global

. ${MY_OWN_BIN_PATH}/_log
. ${MY_OWN_BIN_PATH}/_gather_facts

# edit flag
EDIT_ETC_ENVIRONMENT=""
EDIT_DOCKER_PROXY=""
EDIT_SHELLRC=""
EDIT_NPM=""

readonly SHELLRC=$HOME/.bashrc
readonly BACKUP_DIR="${MY_OWN_STATE_PATH}/proxy/backup"

readonly INSERT_LABEL="# This section was generated by $MY_OWN_BIN_PATH/proxy_switch"

# gather facts
eval $(get_system)

if [ -e "${MY_OWN_SHARE_PATH}/secret/proxy.env.orig" ]; then 
  # source and export all definition
  set -a; . "${MY_OWN_SHARE_PATH}/secret/proxy.env.orig"; set +a
fi

print_proxy () {
  cat << EOF
http_proxy=$http_proxy
HTTP_PROXY=$HTTP_PROXY
https_proxy=$https_proxy
HTTPS_PROXY=$HTTPS_PROXY
ftp_proxy=$ftp_proxy
FTP_PROXY=$FTP_PROXY
no_proxy=$no_proxy
NO_PROXY=$NO_PROXY
ELECTRON_GET_USE_PROXY=true
EOF
}

print_proxy_with_export () {
  cat << EOF
export http_proxy=$http_proxy
export HTTP_PROXY=$HTTP_PROXY
export https_proxy=$https_proxy
export HTTPS_PROXY=$HTTPS_PROXY
export ftp_proxy=$ftp_proxy
export FTP_PROXY=$FTP_PROXY
export no_proxy=$no_proxy
export NO_PROXY=$NO_PROXY
export ELECTRON_GET_USE_PROXY=true
EOF
}

delete_proxy_line() {
  eval "$(get_escalation_method)" sed -i.bak \
    -e "/http_proxy/Id" -e "/HTTP_PROXY/Id" \
    -e "/https_proxy/Id" -e "/HTTPS_PROXY/Id" \
    -e "/ftp_proxy/Id" -e "/FTP_PROXY/Id" \
    -e "/no_proxy/Id" -e "/NO_PROXY/Id" \
    -e "/ELECTRON_GET_USE_PROXY/Id" \
    "$1"
}

cancel() {
  log_error "proxy_switch: Aborted."
  exit 1
}

trap cancel INT

mkdir -p "$BACKUP_DIR"

if [ $# = 0 ]; then
  log_error "proxy_switch: No args"
  exit 1
elif [ $1 != "on" ] && [ $1 != "off" ]; then
  log_error "proxy_switch: Invalid arg. set 'on' or 'off'"
  exit 1
else
  log_note "backup dir: $BACKUP_DIR"
  if [ $1 = "on" ]; then
    if [ ! -e "${MY_OWN_SHARE_PATH}/secret/proxy.env.orig" ]; then 
      log_error "proxy_switch: proxy.env.orig not found."
      exit 2
    else
      log_note "edit proxy: $(print_proxy)"  # print proxy
    fi
  else
    log_note "reset proxy."
  fi

  # select files you want to edit
  read -n1 -p "edit /etc/environment? (y/N): " yn; case "$yn" in [yY]*) EDIT_ETC_ENVIRONMENT="true"; echo "," ;; *) echo ", skip";; esac
  read -n1 -p "edit docker proxy? (y/N): " yn; case "$yn" in [yY]*) EDIT_DOCKER_PROXY="true"; echo "," ;; *) echo ", skip";; esac
  read -n1 -p "edit $SHELLRC? (y/N): " yn; case "$yn" in [yY]*) EDIT_SHELLRC="true"; echo "," ;; *) echo ", skip";; esac
  read -n1 -p "edit npm? (y/N): " yn; case "$yn" in [yY]*) EDIT_NPM="true"; echo ",";; *) echo ", skip";; esac

  read -n1 -p "$(log_warning "ok? (y/N): ")" yn; case "$yn" in [yY]*) echo "";; *) exit 1;; esac


  ## backup and delete previous values
  if [ -e "/etc/environment" ] && [ -n "$EDIT_ETC_ENVIRONMENT" ] ; then
    log_note "clear proxy ➔ /etc/environment"
    delete_proxy_line /etc/environment
    eval "$(get_escalation_method)" mv /etc/environment.bak $BACKUP_DIR
    if [ $1 = "on" ]; then
      log_warning "set proxy ➔ /etc/environment"
      print_proxy | eval "$(get_escalation_method)" tee -a /etc/environment
    fi
  fi

  if [ -n "$EDIT_DOCKER_PROXY" ] ; then
    if [ "$_facts_init" == "systemd" ]; then
      log_note "clear proxy ➔ /etc/systemd/system/docker.service.d/docker-proxy"
      eval "$(get_escalation_method)" mv /etc/systemd/system/docker.service.d/docker-proxy $BACKUP_DIR || true
      if [ $1 = "on" ]; then
        log_warning "set proxy ➔ /etc/systemd/system/docker.service.d/docker-proxy"
        print_proxy | eval "$(get_escalation_method)" tee /etc/systemd/system/docker.service.d/docker-proxy
      fi
    else
      log_note "clear proxy ➔ /etc/default/docker"
      delete_proxy_line /etc/default/docker
      eval "$(get_escalation_method)" mv /etc/default/docker.bak $BACKUP_DIR
      if [ $1 = "on" ]; then
        log_warning "set proxy ➔ /etc/default/docker"
        print_proxy_with_export | eval "$(get_escalation_method)" tee -a /etc/default/docker
      fi
    fi
  fi

  if [ -e "$SHELLRC" ] && [ -n "$EDIT_SHELLRC" ] ; then
    log_note "clear proxy ➔ $SHELLRC"
    [ -L ${MY_OWN_SHARE_PATH}/secret/proxy.env ] && [ -e ${MY_OWN_SHARE_PATH}/secret/proxy.env ] && unlink ${MY_OWN_SHARE_PATH}/secret/proxy.env
    if [ $1 = "on" ]; then
      log_warning "set proxy ➔ $SHELLRC"
      ln -s ${MY_OWN_SHARE_PATH}/secret/proxy.env.orig ${MY_OWN_SHARE_PATH}/secret/proxy.env
    fi
  fi

  if [ "$(command -v npm)" ] && [ -n "$EDIT_NPM" ]; then
    log_note "clear proxy ➔ npm"
    rm $BACKUP_DIR/npm_proxy_settings -f > /dev/null 2>&1
    npm -g config ls -l | grep "^proxy =" | tee -a $BACKUP_DIR/npm_proxy_settings >> /dev/null 2>&1
    npm -g config ls -l | grep "^registry =" | tee -a $BACKUP_DIR/npm_proxy_settings >> /dev/null 2>&1
    npm -g config delete proxy
    npm -g config set registry "https://registry.npmjs.org/"
    if [ $1 = "on" ]; then
      log_warning "set proxy ➔ npm"
      npm -g config set proxy "$http_proxy"
      npm -g config set registry "http://registry.npmjs.org/"
    fi
  fi

fi
