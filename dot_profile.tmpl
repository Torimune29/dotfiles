# ~/.profile: executed by the command interpreter for login shells.
# This file is not read by bash(1), if ~/.bash_profile or ~/.bash_login
# exists.
# see /usr/share/doc/bash/examples/startup-files for examples.
# the files are located in the bash-doc package.

# the default umask is set in /etc/profile; for setting the umask
# for ssh logins, install and configure the libpam-umask package.
#umask 022

#########################################################
# add by user begin
#########################################################
# XDG Base Directory environment variable
# https://specifications.freedesktop.org/basedir-spec/latest/
export XDG_CONFIG_HOME=$HOME/.config
export XDG_CACHE_HOME=$HOME/.cache
export XDG_DATA_HOME=$HOME/.local/share
export XDG_STATE_HOME=$HOME/.local/state

# My own application/funciton/tools environment variable
PATH="$HOME/.local/bin/my_own:$PATH"
export MY_OWN_BIN_PATH=$HOME/.local/bin/my_own
export MY_OWN_SHARE_PATH=$XDG_DATA_HOME/my_own
export MY_OWN_STATE_PATH=$XDG_STATE_HOME/my_own
export MY_OWN_LOG_PATH=$XDG_STATE_HOME/my_own/log

{{ if and (lookPath "wsl.exe") (lookPath "powershell.exe") -}}
# Windows/WSL settings
# !!! wslpath command is too slow.
export WINDOWS_USERNAME=$(powershell.exe '$env:USERNAME' | sed -e 's/^M//g' | tr -d \\r)
export WINDOWS_USER_HOME_PATH="C:/Users/${WINDOWS_USERNAME}/"
export WINDOWS_USER_TMP_PATH="C:/Users/${WINDOWS_USERNAME}/AppData/Local/Temp"
{{ if lookPath "wslpath" -}}
export WINDOWS_USER_HOME_WSL_PATH="$(wslpath $WINDOWS_USER_HOME_PATH)"
export WINDOWS_USER_TMP_WSL_PATH="$(wslpath $WINDOWS_USER_TMP_PATH)"
{{ end }}
{{ end }}

# For using dotnet core without libicu, disable icu. 
# https://stackoverflow.com/questions/59119904/process-terminated-couldnt-find-a-valid-icu-package-installed-on-the-system-in
export DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=1

{{- if stat "/opt/misc/subversion/bin" -}}
# For work: use specific svn
PATH=/opt/misc/subversion/bin:$PATH
{{ end }}

# enable proxy
# use ${MY_OWN_BIN_PATH}/proxy_switch to toggle on/off
if [ -e "${MY_OWN_SHARE_PATH}/secret/proxy.env" ]; then 
  set -a; . "${MY_OWN_SHARE_PATH}/secret/proxy.env"; set +a;
fi

# dotfile sync
if [ "$(command -v chezmoi)" ] && chezmoi --version > /dev/null 2>&1 \
  && [ "$(ps aux | grep chezmoi | wc -l 2>/dev/null)" == "1" ]; then  # for chezmoi recursive call
  # for reload rc, execute on head.
  nohup chezmoi update > /dev/null 2>&1 < /dev/null &
fi

{{ if and (lookPath "wsl.exe") (lookPath "powershell.exe") -}}
if [ "$(command -v docker)" ] && [ "$(command -v service)" ] ; then
  # WSL: boot docker service
  if service docker status 2>&1 | grep -q "is not running"; then
    nohup service docker start > /dev/null 2>&1 < /dev/null &
  fi
fi
{{ end }}

# set PATH so it includes user's private bin if it exists
# for executables in bashrc on login shell
if [ -d "$HOME/.local/bin" ] ; then
    PATH="$HOME/.local/bin:$PATH"
fi

# Editor settings
{{ if lookPath "code" -}}
export EDITOR='code --wait'
{{ else -}}
if [ "$(command -v nvim)" ] && nvim --version > /dev/null 2>&1; then
  export EDITOR="nvim"
elif [ "$(command -v vim)" ] && vim --version > /dev/null 2>&1; then
  export EDITOR="vim"
else
  export EDITOR="vi"
fi
{{ end }}

#########################################################
# add by user end
#########################################################

# if running bash
if [ -n "$BASH_VERSION" ]; then
    # include .bashrc if it exists
    if [ -f "$HOME/.bashrc" ]; then
	. "$HOME/.bashrc"
    fi
fi

# set PATH so it includes user's private bin if it exists
if [ -d "$HOME/bin" ] ; then
    PATH="$HOME/bin:$PATH"
fi

# # set PATH so it includes user's private bin if it exists
# if [ -d "$HOME/.local/bin" ] ; then
#     PATH="$HOME/.local/bin:$PATH"
# fi
